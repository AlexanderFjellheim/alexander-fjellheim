---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import Contact from "../components/Contact.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";
import { getCollection } from "astro:content";
import Card from "../components/Card.astro";
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>

	<body>
		<Header title={SITE_TITLE} />
		<main>
			<canvas class="webgl"></canvas>
			<h1>Litt om meg</h1>
			<section>
				Lorem ipsum dolor sit amet consectetur adipisicing elit.
				Officiis repellat doloribus dignissimos obcaecati eos nulla
				perspiciatis pariatur quasi quae, voluptas corporis! Vel
				nesciunt placeat impedit, voluptatum natus voluptatibus
				reiciendis amet.
			</section>
			<Contact />
		</main>
		<Footer />
	</body><style>
		canvas {
			border: 2px red dotted;
		}
	</style>

	<script>
		import * as THREE from "three";
		import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
		import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";

		// Get the canvas
		const canvas = document.querySelector("canvas.webgl");

		// Scene
		const scene = new THREE.Scene();

		// Camera
		const camera = new THREE.PerspectiveCamera(
			30,
			window.innerWidth / window.innerHeight,
			0.1,
			1000
		);
		camera.position.set(-5, 3, 5);
		camera.lookAt(new THREE.Vector3(0, 0, 0));
		scene.add(camera);

		// Load the glb model
		const loader = new GLTFLoader();
		let mixer: any;

		loader.load(
			"/avatar2.glb", // updated glb model

			function (gltf) {
				const model = gltf.scene;
				const animations = gltf.animations;

				mixer = new THREE.AnimationMixer(model);
				mixer.clipAction(animations[2]).play(); // play the first animation

				scene.add(model);
			}
		);

		// Add a grid helper
		const gridHelper = new THREE.GridHelper(10, 10);
		scene.add(gridHelper);

		// Add a light
		const light = new THREE.DirectionalLight(0xffffff, 1);
		light.position.set(-1, 3, 4);
		scene.add(light);

		// Create the Renderer
		const renderer = new THREE.WebGLRenderer({
			canvas: canvas,
			antialias: true,
		});

		renderer.setSize(window.innerWidth/3, window.innerHeight/3);

		renderer.outputEncoding = THREE.sRGBEncoding;

		// Add OrbitControls
		const controls = new OrbitControls(camera, canvas);
		controls.autoRotate = false;

		// Initialize the main loop
		const clock = new THREE.Clock();
		let lastElapsedTime = 0;

		// Animate Loop
		function animate() {
			// Render the Scene
			renderer.render(scene, camera);

			// Update the controls
			controls.update();

			const elapsedTime = clock.getElapsedTime();
			const deltaTime = elapsedTime - lastElapsedTime;
			lastElapsedTime = elapsedTime;

			// Mixer update
			if (mixer != undefined) {
				mixer.update(deltaTime);
			}

			// Call the animate function again on the next frame
			requestAnimationFrame(animate);
		}
		animate();

		// Add an event listener to the window resize
		window.addEventListener("resize", function () {
			renderer.setSize(window.innerWidth/3, window.innerHeight/3);
			camera.aspect = window.innerWidth / window.innerHeight;
			camera.updateProjectionMatrix();
		});
	</script>
</html>
